Rendering
- (IN PROGRESS) Implement PBR
 - (IN PROGRESS) IBL specular reflections
  - The computation is long: either use GPU or cache it OR lower sample count while debugging
  - Use proper random number generator in GGX importance sampling
 - Implement normal mapping
- Animate lights (position and color/intensity)
- Point light
- Spot light
- Area light
- Bloom
- Reduce IBL reflection aliasing at grazing angles at distance
 - Use array of cubemaps for different roughness levels to free mip levels for 
 - Or a bit trickier, but more efficient: calculate mipLevel based on two parameters: roughness, ???
- Make normals smoothing optional
- Diffuse spherical harmonics: apply windowing functions (like Hanning or Hamming filters)
- Separate the following data per frame in flight:
 - Model transform descriptors
- Shadow maps
 - Requires separate render pass(es) so need to extract this part from RenderSurface
 - Requires separate pipeline so need to extract non-pipeline code from Pipeline class
- Particle systems (cpu/gpu compute)
- Reverse depth buffer
- Mesh animations
- Fog

Organizational
- Reduce main function size
- Use vk-bootstrap

Other
- Use SDL_Vulkan_GetInstanceExtensions
- gltf
- Build to web
- Separate presentation (swapchain) and rendering. Do not render directly to swapchain images. It's required to render in HDR when display support only LDR.
- Sort by Z to reduce overdraw
- Monitor hardware counters: HWCPipe https://github.com/akaStiX/HWCPipe

Errors
- imgui: vkDestroyBuffer():  can't be called on VkBuffer 0xc25c940000000820[] that is currently in use by VkCommandBuffer
